include _docmap.pug

mixin page(name)
  - var info = docmap[name]

  doctype html
  html(lang="en")
    head
      meta(charset="utf-8")
      meta(name="viewport", content="width=device-width, initial-scale=1.0")
      title= info.pageTitle ? info.pageTitle : info.title
      link(rel="stylesheet", href="css/awsm.min.css")

      //- Stuff for social networks
      meta(property="og:title", content= info.pageTitle ? info.pageTitle : 'awsm.css: ' + info.title)
      meta(property="og:description", content= info.description)
      meta(property="og:image", content="https://igoradamenko.github.io/awsm.css/images/cover.png")
      meta(property="og:url", content="https://igoradamenko.github.io/awsm.css/" + (info.url === 'index.html' ? '' : info.url))
      meta(name="twitter:card", content="summary_large_image")
      meta(name="twitter:creator", content="@igoradamenko")

      script.
        #{locals.NODE_ENV === 'dev' ? 'localStorage.clear()' : ''};
        var version = '#{locals.version}';
        var themes = JSON.parse('!{JSON.stringify(locals.themes.map(({ title, prismTheme }) => ({ title, prismTheme })))}');
        var storedVersion = localStorage.getItem('awsm-version');

        if (version !== storedVersion) {
          localStorage.removeItem('awsm-current-theme');
          localStorage.removeItem('awsm-themes');
          localStorage.setItem('awsm-version', version);
        }

        function getCSSFileName(theme) {
          return 'css/awsm_theme_' + theme + '.min.css';
        }

        function appendStyles(str) {
          var style = document.createElement('style');
          style.innerHTML = str;
          document.querySelector('head').appendChild(style);
        }

        function loadTheme() {
          var theme = localStorage.getItem('awsm-current-theme');

          if (!theme || theme === 'white') return;

          reloadTheme(theme);
        }

        function reloadTheme(theme) {
          var storedThemesStr = localStorage.getItem('awsm-themes');

          if (!storedThemesStr) return;

          var storedThemes = JSON.parse(storedThemesStr);

          appendStyles(storedThemes[theme]);
        }

        loadTheme();

    body
      header
        h1 awsm.css
        p
          | It makes your
          = ' '
          abbr(title="HyperText Markup Language is the standard markup language for creating web pages and web applications.") HTML
          = ' '
          | beautiful

        nav
          ul
            - for (var item in docmap)
              - if (item != name)
                li
                  a(href= docmap[item].url, target= docmap[item].blank ? '_blank' : false)= docmap[item].title
              - else
                li= docmap[item].title

            li
              select(id="theme-changer", onchange="updateTheme(this.value)")
                each option, index in locals.themes
                  option(value= option.title, selected= !index) #{option.title}

      main
        article
          if docmap[name].header
            h1= docmap[name].title

          block

      footer
        p Igor Adamenko

      script.
        function loadCSS(path, cb) {
          var xhr = new XMLHttpRequest();
          xhr.open('GET', path);
          xhr.onreadystatechange = function() {
            if (this.readyState === 4 && this.status === 200) {
              cb(this.responseText);
            }
          };
          xhr.send();
        }

        function updateTheme(theme) {
          localStorage.setItem('awsm-current-theme', theme);
          loadCSS(getCSSFileName(theme), function(text) {
            var storedThemesStr = localStorage.getItem('awsm-themes');
            var storedThemes = JSON.parse(storedThemesStr) || {};
            storedThemes[theme] = text;

            localStorage.setItem('awsm-themes', JSON.stringify(storedThemes));
            reloadTheme(theme);
          });
        }

        var theme = localStorage.getItem('awsm-current-theme');

        if (theme && theme !== 'white') {
          document.getElementById('theme-changer').value = theme;
        }

mixin code-block
  pre
    code
      block

mixin h(id, level, skipAnchor)
  - var tag = level ? 'h' + level : 'h2'

  #{tag}
    if id && !skipAnchor
      a(
        id= id,
        href= "#" + id,
        aria-hidden="true"
      )

    block
